name: Integration Tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-vue-mess-detector:
    runs-on: ${{ matrix.platform }}

    strategy:
      matrix:
        platform: [ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]
        package-manager: [ npm, yarn, pnpm, bun ]

    name: Test Vue Mess Detector with ${{ matrix.package-manager }} on ${{ matrix.platform }}
    steps:
      - name: Create package directory
        run: mkdir ./package

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: './package'

      - name: Create test-repo directory
        run: mkdir ./test-repo

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check PNPM
        if: matrix.package-manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: '9.9.0'

      - name: Check Yarn
        if: matrix.package-manager == 'yarn'
        run: npm install -g yarn

      - name: Check Bun
        if: matrix.package-manager == 'bun'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.1.26'

      - name: Create Vue Project (Linux/Mac)
        if: runner.os != 'Windows'
        working-directory: ./test-repo
        run: |
          if [ "${{ matrix.package-manager }}" == "pnpm" ]; then
            yes "my-package" | head -n 1 | pnpm create vue@latest . --default --typescript
            pnpm install
          elif [ "${{ matrix.package-manager }}" == "yarn" ]; then
            yes "my-package" | head -n 1 | yarn --cwd . create vue . --default --typescript
            yarn install
          elif [ "${{ matrix.package-manager }}" == "bun" ]; then
            yes "my-package" | head -n 1 | bun create vue . --default --typescript --cwd=. --ignore-scripts
            bun install --ignore-scripts
          else
            yes "my-package" | head -n 1 | npm create vue@latest -- . --default --typescript
            npm install
          fi

      - name: Create Vue Project (Windows)
        if: runner.os == 'Windows'
        working-directory: ./test-repo
        run: |
          if ($Env:matrix_package_manager -eq 'pnpm') {
            echo "my-package" | pnpm create vue@latest . --default --typescript
            pnpm install
          } elseif ($Env:matrix_package_manager -eq 'yarn') {
            echo "my-package" | yarn create vue . --default --typescript
            yarn install
          } elseif ($Env:matrix_package_manager -eq 'bun') {
            echo "my-package" | bun create vue . --default --typescript --ignore-scripts
            bun install --ignore-scripts
          } else {
            echo "my-package" | npm create vue@latest -- . --default --typescript
            npm install
          }

      - name: Run Vue Mess Detector (Linux/Mac)
        if: runner.os != 'Windows'
        working-directory: ./test-repo
        run: |
          if [ "${{ matrix.package-manager }}" == "pnpm" ]; then
              pnpm add vue-mess-detector -D
              pnpm vue-mess-detector analyze
          elif [ "${{ matrix.package-manager }}" == "yarn" ]; then
              yarn add vue-mess-detector -D
              yarn vue-mess-detector analyze
          elif [ "${{ matrix.package-manager }}" == "bun" ]; then
              bun add vue-mess-detector --dev
              bunx vue-mess-detector analyze
          else
              npm install vue-mess-detector --save-dev
              npx vue-mess-detector analyze

      - name: Run Vue Mess Detector (Windows)
        if: runner.os == 'Windows'
        working-directory: ./test-repo
        run: |
          if ($Env:matrix_package_manager -eq 'pnpm') {
              pnpm add vue-mess-detector -D
              pnpm vue-mess-detector analyze
          } elseif ($Env:matrix_package_manager -eq 'yarn') {
              yarn add vue-mess-detector -D
              yarn vue-mess-detector analyze
          } elseif ($Env:matrix_package_manager -eq 'bun') {
            bun add vue-mess-detector --dev
            bunx vue-mess-detector analyze
          } else {
            npm install vue-mess-detector --save-dev
            npx vue-mess-detector analyze
          }
